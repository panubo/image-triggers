# Source: https://github.com/panubo/reference-github-actions/blob/main/golang-test-build.yml

name: Test and Build

env:
  GOLANG_VERSION: 1.25

on:
  push:
    branches:
      - "main"
    tags:
      - "v*"
  pull_request:

permissions:
  id-token: write # Required for OIDC
  contents: write # This is required for actions/checkout and creating releases
  actions: write # Require to upload artifacts

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install python
        uses: actions/setup-python@v3

      - name: Install golang
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOLANG_VERSION }}

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          install-only: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest # v2.4.0 or newer for golang 1.25

      - name: Run pre-commit checks
        uses: pre-commit/action@v3.0.0
        with:
          extra_args: "--all-files --hook-stage manual"

  test-trivy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy scanner
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: fs
          scan-ref: .
          hide-progress: true
          output: trivy.txt
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          exit-code: 1

      - name: Publish Trivy Output to Summary
        if: success() || failure()
        run: |
          if [[ -s trivy.txt ]]; then
            {
              echo "### Trivy Scanner Output"
              echo "<details><summary>Click to expand</summary>"
              echo ""
              echo '```terraform'
              cat trivy.txt
              echo '```'
              echo "</details>"
            } >> $GITHUB_STEP_SUMMARY
          fi

  build:
    needs: ["test", "test-trivy"]
    runs-on: ubuntu-latest
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOLANG_VERSION }}

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          install-only: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # The values provided to these two AWS steps are always the same for Panubo owned repos
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Login to ECR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: public.ecr.aws

      - name: Login to Quay.io
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.PANUBUILD_QUAYIO_USERNAME }}
          password: ${{ secrets.PANUBUILD_QUAYIO_TOKEN }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: GoReleaser
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            goreleaser
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            goreleaser --snapshot
          fi

      - name: Upload assets
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*
